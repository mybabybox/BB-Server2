#####################################################################################
#
# My play-authenticate settings
#
#####################################################################################

play-authenticate {


	accountMergeEnabled=false
    # Settings for the password-based authentication provider
    # if you are not using it, you can remove this portion of the config file
    password {
        mail {
            verificationLink {
                # Whether the verification link will be HTTPS
                secure=false
            }
            passwordResetLink {
                # Whether the password reset link will be HTTPS
                secure=false
            }
            from {
                 # Mailing from address
                email="mybabybox.dev@gmail.com"

                # Mailing name
                name=BabyBox
            }
            # Pause between email jobs (in seconds)
            delay=1
        }
        # Whether to directly log in after the password reset (true)
        # or send the user to the login page (false)
        loginAfterPasswordReset=true
    }

    # Settings for the http basic auth provider
    # if you are not using it (and you shouldn't), you can remove this portion
    # of the config file
    basic {
        realm=Play_Authenticate
    }
    # The Twitter settings
    twitter {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        requestTokenUrl="https://api.twitter.com/oauth/request_token"
		accessTokenUrl="https://api.twitter.com/oauth/access_token"
		authorizationUrl="https://api.twitter.com/oauth/authenticate"
		userInfoUrl="https://api.twitter.com/1.1/account/verify_credentials.json"


        # Get the credentials here: https://dev.twitter.com/docs/auth/oauth
        # Remove leading '#' after entering:
        # consumerKey=
        # consumerSecret=



    }
    # The Linkedin settings
    linkedin {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        requestTokenUrl="https://api.linkedin.com/uas/oauth/requestToken?scope=r_fullprofile+r_emailaddress"
        accessTokenUrl="https://api.linkedin.com/uas/oauth/accessToken"
        authorizationUrl="https://api.linkedin.com/uas/oauth/authenticate"
        userInfoUrl="http://api.linkedin.com/v1/people/~:(id,picture-url,first-name,last-name,industry,positions,educations,public-profile-url)?format=json"
        userEmailUrl="http://api.linkedin.com/v1/people/~/email-address?format=json"

        # Get the credentials here: http://developer.linkedin.com/
        # Remove leading '#' after entering:
        # consumerKey=
        # consumerSecret=



    }

    # The Foursquare settings
    foursquare {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        authorizationUrl="https://foursquare.com/oauth2/authorize"
        accessTokenUrl="https://foursquare.com/oauth2/access_token"
        userInfoUrl="https://api.foursquare.com/v2/users/self"

        # Get the credentials here: https://de.foursquare.com/oauth/
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=

    }

	# The Facebook settings
    facebook {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        authorizationUrl="https://graph.facebook.com/oauth/authorize"
        accessTokenUrl="https://graph.facebook.com/oauth/access_token"
        userInfoUrl="https://graph.facebook.com/me"

        # Comma-separated list of fields to retrieve from this Facebook user.
        # See possible values here: https://developers.facebook.com/docs/reference/api/user/
        # Note that some fields may require additional permissions on your Facebook App.
        userInfoFields="id,email,cover,name,first_name,last_name,birthday,gender,age_range,relationship_status,link,timezone,locale,education,verified,updated_time"

        #scope="email,user_birthday,user_friends"
        scope="email,user_friends"
        
        # Get the credentials here: https://developers.facebook.com/apps
        # Remove leading '#' after entering:
        #clientId=1469039100069403
        #clientSecret=44f1e449a981f4e5386e25b2646c58f7
        clientId=1469031873403459
        clientSecret=1f9b43324514e8cfe76a2275d05aae28
    }

	# The Google settings
    google {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        authorizationUrl="https://accounts.google.com/o/oauth2/auth"
        accessTokenUrl="https://accounts.google.com/o/oauth2/token"
        userInfoUrl="https://www.googleapis.com/oauth2/v1/userinfo"
        scope="https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email"

        # Additional parameters - Read more about them here: https://developers.google.com/accounts/docs/OAuth2WebServer#offline
        # accessType="offline"
        # approvalPrompt="force"

        # Get the credentials here: https://code.google.com/apis/console
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }

    # The OpenID settings
    openid {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        attributes {
            required {
                email="http://schema.openid.net/contact/email"
            }

            optional {
                country="http://axschema.org/contact/country/home"
                firstname="http://axschema.org/namePerson/first"
                language="http://axschema.org/pref/language"
                lastname="http://axschema.org/namePerson/last"
            }
        }
    }

    # The Vk settings
    vk {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        authorizationUrl="https://oauth.vk.com/authorize"
        accessTokenUrl="https://oauth.vk.com/access_token"
        userInfoUrl="https://api.vk.com/method/users.get"

        # Comma-separated list of fields to retrieve from this Vk user.
        # See possible values here: http://vk.com/dev/users.get
        userInfoFields="nickname,screen_name,sex,photo_200_orig,timezone"

        # Get the credentials here: http://vk.com/editapp?act=create
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }

    # The XING settings
    xing {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        requestTokenUrl="https://api.xing.com/v1/request_token"
        accessTokenUrl="https://api.xing.com/v1/access_token"
        authorizationUrl="https://api.xing.com/v1/authorize"
        userInfoUrl="https://api.xing.com/v1/users/me?fields=id,first_name,last_name,display_name,active_email,photo_urls,permalink,gender"

        # XING credentials
        # Get them here: https://dev.xing.com/
        # Remove leading '#' after entering:
        # consumerKey=
        # consumerSecret=
    }

    # The Untappd settings
    untappd {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # Take the code paramater and then pass it back to the following address via GET (pass parameters via
            # the Query String):
            # host=yourdomain.com
        }

        accessTokenUrl="https://untappd.com/oauth/authorize"
        authorizationUrl="https://untappd.com/oauth/authenticate"
        userInfoUrl="http://api.untappd.com/v4/user/info"


        # Untappd credentials
        # Get them here: https://untappd.com/api/
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }

	# The Pocket settings
    pocket {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=true

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        requestTokenUrl="https://getpocket.com/v3/oauth/request"
        accessTokenUrl="https://getpocket.com/v3/oauth/authorize"
        authorizationUrl="https://getpocket.com/auth/authorize"

        # Pocket credentials
        # Get them here: http://getpocket.com/developer/apps/new
        # Remove leading '#' after entering:
        # consumerKey=
    }

	# The Github settings
    github {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=true

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        accessTokenUrl="https://github.com/login/oauth/access_token"
        authorizationUrl="https://github.com/login/oauth/authorize"
        userInfoUrl="https://api.github.com/user"

        # Github credentials
        # Get them here: https://github.com/settings/applications/new
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }


    # The eventbrite settings
    eventbrite {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # Take the code paramater and then pass it back to the following address via GET (pass parameters via
            # the Query String):
            # host=yourdomain.com
        }

        authorizationUrl="https://www.eventbrite.com/oauth/authorize"
        accessTokenUrl="https://www.eventbrite.com/oauth/token"
        userInfoUrl="https://www.eventbriteapi.com/v3/users/me"

        # eventbrite credentials
        # Get them here: http://developer.eventbrite.com/
        # Redirect URL should be something like: http://yourdomain.com/authenticate/eventbrite
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }
}
